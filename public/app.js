"use strict";

const ListItem = props => /*#__PURE__*/React.createElement("li", null, props.item);

const List = props => /*#__PURE__*/React.createElement("ul", null, props.list.map((item, index) => {
  return /*#__PURE__*/React.createElement(ListItem, {
    key: index,
    item: item
  });
}));

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      list: [],
      itemToAdd: ""
    };
    this._handleChange = this._handleChange.bind(this);
    this._handleSubmit = this._handleSubmit.bind(this);
  }

  _handleChange(e) {
    this.setState({
      [e.target.name]: e.target.value
    });
  }

  _handleSubmit(e) {
    e.preventDefault();
    console.log("You submitted the form!");
    const updatedList = this.state.list.slice();
    updatedList.push(this.state.itemToAdd);
    $.ajax({
      url: "/list",
      method: "POST",
      data: {
        data: this.state.itemToAdd
      },
      success: () => {
        console.log("ajax success");
        this.setState({
          itemToAdd: ""
        });
      },
      error: () => {
        console.log("ajax error");
      }
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Grocery List"), /*#__PURE__*/React.createElement(List, {
      list: this.state.list
    }), /*#__PURE__*/React.createElement("form", {
      onSubmit: this._handleSubmit
    }, /*#__PURE__*/React.createElement("label", null, "Cart:", " ", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "itemToAdd",
      value: this.state.itemToAdd,
      onChange: this._handleChange
    })), /*#__PURE__*/React.createElement("input", {
      type: "submit",
      value: "Submit"
    })));
  }

}

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById("app")); // _handleChange(event) {
//   this.setState({
//     [event.target.name]: event.target.value
//   }, () => {
//     this._getTotal(this.state.unitPrice, this.state.quantity);
//   });
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9hcHAuanN4Il0sIm5hbWVzIjpbIkxpc3RJdGVtIiwicHJvcHMiLCJpdGVtIiwiTGlzdCIsImxpc3QiLCJtYXAiLCJpbmRleCIsIkFwcCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJzdGF0ZSIsIml0ZW1Ub0FkZCIsIl9oYW5kbGVDaGFuZ2UiLCJiaW5kIiwiX2hhbmRsZVN1Ym1pdCIsImUiLCJzZXRTdGF0ZSIsInRhcmdldCIsIm5hbWUiLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwiY29uc29sZSIsImxvZyIsInVwZGF0ZWRMaXN0Iiwic2xpY2UiLCJwdXNoIiwiJCIsImFqYXgiLCJ1cmwiLCJtZXRob2QiLCJkYXRhIiwic3VjY2VzcyIsImVycm9yIiwicmVuZGVyIiwiUmVhY3RET00iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUlDLEtBQUQsaUJBQVcsZ0NBQUtBLEtBQUssQ0FBQ0MsSUFBWCxDQUE1Qjs7QUFFQSxNQUFNQyxJQUFJLEdBQUlGLEtBQUQsaUJBQ1gsZ0NBQ0dBLEtBQUssQ0FBQ0csSUFBTixDQUFXQyxHQUFYLENBQWUsQ0FBQ0gsSUFBRCxFQUFPSSxLQUFQLEtBQWlCO0FBQy9CLHNCQUFPLG9CQUFDLFFBQUQ7QUFBVSxJQUFBLEdBQUcsRUFBRUEsS0FBZjtBQUFzQixJQUFBLElBQUksRUFBRUo7QUFBNUIsSUFBUDtBQUNELENBRkEsQ0FESCxDQURGOztBQVFBLE1BQU1LLEdBQU4sU0FBa0JDLEtBQUssQ0FBQ0MsU0FBeEIsQ0FBa0M7QUFDaENDLEVBQUFBLFdBQVcsQ0FBQ1QsS0FBRCxFQUFRO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLVSxLQUFMLEdBQWE7QUFDWFAsTUFBQUEsSUFBSSxFQUFFLEVBREs7QUFFWFEsTUFBQUEsU0FBUyxFQUFFO0FBRkEsS0FBYjtBQUlBLFNBQUtDLGFBQUwsR0FBcUIsS0FBS0EsYUFBTCxDQUFtQkMsSUFBbkIsQ0FBd0IsSUFBeEIsQ0FBckI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLEtBQUtBLGFBQUwsQ0FBbUJELElBQW5CLENBQXdCLElBQXhCLENBQXJCO0FBQ0Q7O0FBRURELEVBQUFBLGFBQWEsQ0FBQ0csQ0FBRCxFQUFJO0FBQ2YsU0FBS0MsUUFBTCxDQUFjO0FBQ1osT0FBQ0QsQ0FBQyxDQUFDRSxNQUFGLENBQVNDLElBQVYsR0FBaUJILENBQUMsQ0FBQ0UsTUFBRixDQUFTRTtBQURkLEtBQWQ7QUFHRDs7QUFFREwsRUFBQUEsYUFBYSxDQUFDQyxDQUFELEVBQUk7QUFDZkEsSUFBQUEsQ0FBQyxDQUFDSyxjQUFGO0FBQ0FDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlCQUFaO0FBRUEsVUFBTUMsV0FBVyxHQUFHLEtBQUtiLEtBQUwsQ0FBV1AsSUFBWCxDQUFnQnFCLEtBQWhCLEVBQXBCO0FBQ0FELElBQUFBLFdBQVcsQ0FBQ0UsSUFBWixDQUFpQixLQUFLZixLQUFMLENBQVdDLFNBQTVCO0FBRUFlLElBQUFBLENBQUMsQ0FBQ0MsSUFBRixDQUFPO0FBQ0xDLE1BQUFBLEdBQUcsRUFBRSxPQURBO0FBRUxDLE1BQUFBLE1BQU0sRUFBRSxNQUZIO0FBR0xDLE1BQUFBLElBQUksRUFBRTtBQUFFQSxRQUFBQSxJQUFJLEVBQUUsS0FBS3BCLEtBQUwsQ0FBV0M7QUFBbkIsT0FIRDtBQUlMb0IsTUFBQUEsT0FBTyxFQUFFLE1BQU07QUFDYlYsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksY0FBWjtBQUNBLGFBQUtOLFFBQUwsQ0FBYztBQUNaTCxVQUFBQSxTQUFTLEVBQUU7QUFEQyxTQUFkO0FBR0QsT0FUSTtBQVVMcUIsTUFBQUEsS0FBSyxFQUFFLE1BQU07QUFDWFgsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksWUFBWjtBQUNEO0FBWkksS0FBUDtBQWNEOztBQUVEVyxFQUFBQSxNQUFNLEdBQUc7QUFDUCx3QkFDRSw4Q0FDRSwrQ0FERixlQUVFLG9CQUFDLElBQUQ7QUFBTSxNQUFBLElBQUksRUFBRSxLQUFLdkIsS0FBTCxDQUFXUDtBQUF2QixNQUZGLGVBR0U7QUFBTSxNQUFBLFFBQVEsRUFBRSxLQUFLVztBQUFyQixvQkFDRSw0Q0FDUSxHQURSLGVBRUU7QUFDRSxNQUFBLElBQUksRUFBQyxNQURQO0FBRUUsTUFBQSxJQUFJLEVBQUMsV0FGUDtBQUdFLE1BQUEsS0FBSyxFQUFFLEtBQUtKLEtBQUwsQ0FBV0MsU0FIcEI7QUFJRSxNQUFBLFFBQVEsRUFBRSxLQUFLQztBQUpqQixNQUZGLENBREYsZUFVRTtBQUFPLE1BQUEsSUFBSSxFQUFDLFFBQVo7QUFBcUIsTUFBQSxLQUFLLEVBQUM7QUFBM0IsTUFWRixDQUhGLENBREY7QUFrQkQ7O0FBM0QrQjs7QUE4RGxDc0IsUUFBUSxDQUFDRCxNQUFULGVBQWdCLG9CQUFDLEdBQUQsT0FBaEIsRUFBeUJFLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixLQUF4QixDQUF6QixFLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgTGlzdEl0ZW0gPSAocHJvcHMpID0+IDxsaT57cHJvcHMuaXRlbX08L2xpPjtcblxuY29uc3QgTGlzdCA9IChwcm9wcykgPT4gKFxuICA8dWw+XG4gICAge3Byb3BzLmxpc3QubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIDxMaXN0SXRlbSBrZXk9e2luZGV4fSBpdGVtPXtpdGVtfSAvPjtcbiAgICB9KX1cbiAgPC91bD5cbik7XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsaXN0OiBbXSxcbiAgICAgIGl0ZW1Ub0FkZDogXCJcIixcbiAgICB9O1xuICAgIHRoaXMuX2hhbmRsZUNoYW5nZSA9IHRoaXMuX2hhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IHRoaXMuX2hhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgX2hhbmRsZUNoYW5nZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBbZS50YXJnZXQubmFtZV06IGUudGFyZ2V0LnZhbHVlLFxuICAgIH0pO1xuICB9XG5cbiAgX2hhbmRsZVN1Ym1pdChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnNvbGUubG9nKFwiWW91IHN1Ym1pdHRlZCB0aGUgZm9ybSFcIik7XG5cbiAgICBjb25zdCB1cGRhdGVkTGlzdCA9IHRoaXMuc3RhdGUubGlzdC5zbGljZSgpO1xuICAgIHVwZGF0ZWRMaXN0LnB1c2godGhpcy5zdGF0ZS5pdGVtVG9BZGQpO1xuXG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogXCIvbGlzdFwiLFxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGRhdGE6IHsgZGF0YTogdGhpcy5zdGF0ZS5pdGVtVG9BZGQgfSxcbiAgICAgIHN1Y2Nlc3M6ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJhamF4IHN1Y2Nlc3NcIik7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGl0ZW1Ub0FkZDogXCJcIixcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJhamF4IGVycm9yXCIpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGgxPkdyb2NlcnkgTGlzdDwvaDE+XG4gICAgICAgIDxMaXN0IGxpc3Q9e3RoaXMuc3RhdGUubGlzdH0gLz5cbiAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuX2hhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgQ2FydDp7XCIgXCJ9XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBuYW1lPVwiaXRlbVRvQWRkXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuaXRlbVRvQWRkfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5faGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJTdWJtaXRcIiAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKSk7XG5cbi8vIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbi8vICAgdGhpcy5zZXRTdGF0ZSh7XG4vLyAgICAgW2V2ZW50LnRhcmdldC5uYW1lXTogZXZlbnQudGFyZ2V0LnZhbHVlXG4vLyAgIH0sICgpID0+IHtcbi8vICAgICB0aGlzLl9nZXRUb3RhbCh0aGlzLnN0YXRlLnVuaXRQcmljZSwgdGhpcy5zdGF0ZS5xdWFudGl0eSk7XG4vLyAgIH0pO1xuLy8gfVxuIl19